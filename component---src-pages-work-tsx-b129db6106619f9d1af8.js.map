{"version":3,"sources":["webpack:///./src/components/Diagonals.tsx","webpack:///./src/data/work.ts","webpack:///./src/pages/work.tsx","webpack:///./src/helper.tsx"],"names":["colors","Diagonal","index","scale","Math","random","useEffect","initialPosition","lifetime","anime","targets","translateY","loop","opacity","value","duration","delay","easing","className","x","width","height","rx","fill","floor","length","style","mixBlendMode","transform","Diagonals","viewBox","xmlns","Array","keys","map","_","i","key","hex","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","stopOpacity","work","employer","name","logo","Date","location","title","summary","useStyles","makeStyles","theme","root","padding","spacing","marginTop","large","objectFit","boxSizing","margin","h5","marginRight","toShortString","date","getMonth","getFullYear","Work","classes","Grid","container","justify","alignItems","item","sm","alt","src","Box","display","Typography","variant","color","point","align","markdown","matches","matchAll","contents","match","push","substr","indexOf","Link","href","renderLinks","WorkPage","stagger","NavHeader","gutterBottom","Container","maxWidth","direction","experience","xs","Paper","elevation"],"mappings":"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","file":"component---src-pages-work-tsx-b129db6106619f9d1af8.js","sourcesContent":["import React, { useEffect } from 'react';\nimport anime from 'animejs';\n\nimport './Diagonals.css';\n\nconst colors = ['#FF2525', '#FFB800', '#FF007A', '#0E8BFF', '#00FFA3', '#8DEF5F', '#7000FF'];\n\nfunction Diagonal({ index }: { index: number }) {\n    const scale = 0.8 * Math.random() + 0.2;\n\n    useEffect(() => {\n        // Need individual durations to make infinite loop\n        const initialPosition = Math.random() * 733 * 2 - 733;\n        const lifetime = 30000 * (1 + Math.random());\n        const transitionTime = 2000;\n\n        anime({\n            targets: `.diagonal${index}`,\n            translateY: [initialPosition, initialPosition + 800],\n            loop: true,\n            opacity: [\n                { value: 0, duration: 0 },\n                { value: 1, duration: transitionTime },\n                { value: 0, duration: transitionTime, delay: lifetime - transitionTime },\n            ],\n            delay: index * 200,\n            duration: lifetime,\n            easing: 'linear',\n        });\n    }, [index]);\n\n    return (\n        <rect\n            className={`diagonal diagonal${index}`}\n            x=\"690.136\"\n            width=\"60\"\n            height=\"976\"\n            rx=\"30\"\n            fill={`url(#paint${Math.floor(Math.random() * colors.length)}_linear)`}\n            style={{ mixBlendMode: 'screen', transform: `scale(${scale}) rotate(45deg)` }}\n        />\n    );\n}\n\nfunction Diagonals() {\n    const diagonals = 15;\n\n    return (\n        <div className=\"background\">\n            <div className=\"Diagonals\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"-733 0 1466 1466\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    {[...Array(diagonals).keys()].map((_, i) => (\n                        <Diagonal index={i} key={`diagonal-${i}`} />\n                    ))}\n                    <defs>\n                        {colors.map((hex, i) => (\n                            <linearGradient\n                                key={`paints${i}_linear`}\n                                id={`paint${i}_linear`}\n                                x1=\"720.136\"\n                                y1=\"966.313\"\n                                x2=\"720.136\"\n                                y2=\"-16.565\"\n                                gradientUnits=\"userSpaceOnUse\"\n                            >\n                                <stop stopColor={hex} />\n                                <stop offset=\"1\" stopColor={hex} stopOpacity=\"0\" />\n                            </linearGradient>\n                        ))}\n                    </defs>\n                </svg>\n            </div>\n        </div>\n    );\n}\n\nexport default Diagonals;\n","const work = [\n    {\n        employer: {\n            name: 'Microsoft',\n            logo: '/img/logo/microsoft.png',\n        },\n        duration: [new Date(2020, 4), new Date(2020, 7)],\n        location: 'Vancouver',\n        title: 'Software Engineer Intern',\n        summary: [\n            'Used C# and DirectX capture API to implement animated GIF recorder for PowerToys',\n            'Worked on a confidential project with Azure Functions as part of Microsoft Global Hackathon involving Kubernetes',\n            'Implemented an auto collage image generator ([Microsoft Gryd](https://www.behance.net/gallery/104025097/Microsoft-Gryd-A-Microsoft-Design-Internship-Project?fbclid=IwAR1JLvHi4EYL8nt9ddIUFgnDWmOhqGPMxFTSPZzGiMEsL3irz6EPxeSMXAI)) from userâ€™s OneDrive using Flask and React',\n            'Defined and implemented a scalable code and data architecture for a synchronous multiplayer game using Angular, Phaser, Express and Socket.io',\n        ],\n    },\n    {\n        employer: {\n            name: 'Nokia',\n            logo: '/img/logo/nokia.png',\n        },\n        duration: [new Date(2020, 0), new Date(2020, 3)],\n        location: 'Kanata',\n        title: 'Security Developer Intern',\n        summary: [\n            'Maintained custom RPM, docker, and helm deployment of Keycloak',\n            'Created a generic system to upload custom jar modules to Keycloak helm via init-containers and config-maps',\n            'Wrote a Jenkins pipeline to automate Keycloak Centos8 tests',\n        ],\n    },\n    {\n        employer: {\n            name: 'University of Alberta',\n            logo: '/img/logo/uofa.png',\n        },\n        duration: [new Date(2019, 4), new Date(2019, 7)],\n        location: 'Edmonton',\n        title: 'Research Assistant',\n        summary: [\n            'Designed a scalable database manager app in WPF (C#/XAML) to easily view and download data from mongoDB, Cassandra, MySQL, and CosmosDB',\n            'Wrote a C#/Java interface to pipe 6000+ tags per second from OPC-DA server to mongoDB, Cassandra, MySQL',\n            'Set-up a Hadoop and mongoDB cluster to process Big Data ',\n        ],\n    },\n];\n\nexport default work;\n","import React, { useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport anime from 'animejs';\nimport NavHeader from '../components/NavHeader';\nimport Diagonals from '../components/Diagonals';\n\nimport work from '../data/work';\n\nimport { renderLinks } from '../helper';\n\ntype ExperienceProps = {\n    employer: {\n        name: string;\n        logo?: string;\n    };\n    duration: Date[];\n    location: string;\n    title: string;\n    summary: string[];\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(1),\n        opacity: 0, // Prevent flash before animation starts\n    },\n    title: {\n        marginTop: '50px',\n    },\n    large: {\n        objectFit: 'contain',\n        boxSizing: 'border-box',\n        width: '100%',\n        height: '100%',\n        padding: '5%',\n        margin: 'auto',\n    },\n    h5: {\n        marginRight: '.5em',\n    },\n}));\n\nfunction toShortString(date: Date): String {\n    const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n\n    return `${monthNames[date.getMonth()]} ${date.getFullYear()}`;\n}\n\nconst Work = ({ employer, location, title, summary, duration }: ExperienceProps) => {\n    const classes = useStyles();\n\n    return (\n        <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item sm={4}>\n                <img className={classes.large} alt={`${employer.name}-logo`} src={employer.logo} />\n            </Grid>\n            <Grid item sm={7}>\n                <Box display=\"flex\">\n                    <Typography variant=\"h5\" className={classes.h5}>\n                        {employer.name}\n                    </Typography>\n                    <Typography variant=\"h6\" color=\"textSecondary\">\n                        {location}\n                    </Typography>\n                </Box>\n\n                <Typography variant=\"subtitle1\">{title}</Typography>\n\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    {`${toShortString(duration[0])} - ${toShortString(duration[1])}`}\n                </Typography>\n\n                <ul>\n                    {summary.map((point, i) => (\n                        <li key={i}>\n                            <Typography variant=\"body1\" align=\"left\">\n                                {renderLinks(point)}\n                            </Typography>\n                        </li>\n                    ))}\n                </ul>\n            </Grid>\n        </Grid>\n    );\n};\n\nconst WorkPage = () => {\n    const classes = useStyles();\n\n    useEffect(() => {\n        anime({\n            targets: '.experience',\n            translateY: ['-20px', 0],\n            opacity: [0, 1],\n            easing: 'easeOutCubic',\n            duration: 1000,\n            delay: anime.stagger(200),\n        });\n    }, []);\n\n    return (\n        <div className=\"Work\">\n            <NavHeader />\n\n            <Diagonals />\n\n            <Typography variant=\"h3\" className={classes.title} gutterBottom align=\"center\">\n                My work experience\n            </Typography>\n            <Container maxWidth=\"md\">\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                    {work.map((experience) => (\n                        <Grid item xs={12} key={experience.employer.name}>\n                            <Paper elevation={0} className={classes.root + ' experience'}>\n                                <Work\n                                    employer={experience.employer}\n                                    location={experience.location}\n                                    title={experience.title}\n                                    summary={experience.summary}\n                                    duration={experience.duration}\n                                />\n                            </Paper>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Container>\n        </div>\n    );\n};\n\nexport default WorkPage;\n","import Link from '@material-ui/core/Link';\nimport React, { ReactNode } from 'react';\n\nexport function renderLinks(markdown: string): ReactNode {\n    const linkCatcher = /\\[(.+?)\\]\\((.+?)\\)/g;\n    const matches = markdown.matchAll(linkCatcher);\n\n    if (matches === null) {\n        return markdown;\n    }\n\n    let i = 0;\n    let contents: ReactNode[] = [];\n\n    for (const match of matches) {\n        contents.push(markdown.substr(i, markdown.indexOf(match[0]) - i));\n        contents.push(\n            <Link href={match[2]} color=\"secondary\">\n                {match[1]}\n            </Link>\n        );\n        i += markdown.indexOf(match[0]) + match[0].length;\n    }\n\n    contents.push(markdown.substr(i, markdown.length));\n\n    return contents;\n}\n"],"sourceRoot":""}