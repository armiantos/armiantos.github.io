{"version":3,"sources":["Logo.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","App","useEffect","anime","timeline","add","targets","easing","duration","strokeDashoffset","setDashoffset","opacity","translateY","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAqCeA,MAnCf,YAA8B,IAAdC,EAAa,EAAbA,UACd,OACE,yBACEA,UAAWA,EACXC,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,yXACFC,OAAO,UACPC,YAAY,MAEd,0BACEF,EAAE,qOACFC,OAAO,UACPC,YAAY,MAEd,0BACEF,EAAE,kXACFC,OAAO,UACPC,YAAY,MAEd,0BAAMF,EAAE,4BAA4BC,OAAO,UAAUC,YAAY,MACjE,0BACEF,EAAE,gIACFC,OAAO,UACPC,YAAY,QCYLC,MArCf,WAyBE,OAJAC,qBAAU,WAnBCC,IAAMC,SAAS,IAIvBC,IAAI,CACHC,QAAS,iBACTC,OAAQ,gBACRC,SAAU,IACVC,iBAAkB,CAACN,IAAMO,cAAe,KAEzCL,IAAI,CACHC,QAAS,mBACTE,SAAU,IACVG,QAAS,CAAC,EAAG,GACbJ,OAAQ,eACRK,WAAY,CAAC,QAAS,IACrB,YAQH,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAMA,UAAU,aAChB,uBAAGA,UAAU,mBAAb,QACO,mCADP,0BCvBYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.906c4061.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Logo({ className }) {\r\n  return (\r\n    <svg\r\n      className={className}\r\n      width=\"807\"\r\n      height=\"203\"\r\n      viewBox=\"0 0 807 203\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M150 191.222V189.56L148.531 190.339C134.5 197.783 118.494 202 101.5 202C45.9954 202 1 157.005 1 101.5C1 45.9954 45.9954 1 101.5 1C157.005 1 202 45.9954 202 101.5C202 101.665 202 101.83 201.999 101.995L201.994 103H202V202H150V191.222ZM101.5 150C128.286 150 150 128.286 150 101.5C150 74.7142 128.286 53 101.5 53C74.7142 53 53 74.7142 53 101.5C53 128.286 74.7142 150 101.5 150Z\"\r\n        stroke=\"#40DCC0\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M302.5 1C357.838 1 402.73 45.7254 402.999 101H350.997C350.729 74.4445 329.119 53 302.5 53C275.881 53 254.271 74.4445 254.003 101H254V101.5V102V202H202V101.5V1H254V11.7776V13.4401L255.469 12.661C269.5 5.21706 285.506 1 302.5 1Z\"\r\n        stroke=\"#40DCC0\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M756 107V202H705V107C705 79.3858 682.614 57 655 57C627.386 57 605 79.3858 605 107V202H554V107C554 79.3858 531.614 57 504 57C476.386 57 454 79.3858 454 107V202H403V107V6H454V17.5187V19.2082L455.481 18.3954C469.88 10.494 486.414 6 504 6C533.632 6 560.283 18.7597 578.76 39.0876L579.5 39.9018L580.24 39.0876C598.717 18.7597 625.368 6 655 6C710.781 6 756 51.2192 756 107Z\"\r\n        stroke=\"#40DCC0\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path d=\"M756 101H806V202H756V101Z\" stroke=\"#40DCC0\" strokeWidth=\"2\" />\r\n      <path\r\n        d=\"M806 31C806 44.8071 794.807 56 781 56C767.193 56 756 44.8071 756 31C756 17.1929 767.193 6 781 6C794.807 6 806 17.1929 806 31Z\"\r\n        stroke=\"#40DCC0\"\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport anime from \"animejs\";\r\n\r\nimport Logo from './Logo';\r\n\r\nfunction App() {\r\n  function animate() {\r\n    var tl = anime.timeline({\r\n    });\r\n\r\n    tl\r\n    .add({\r\n      targets: \".App-logo path\",\r\n      easing: 'easeInOutSine',\r\n      duration: 5000,\r\n      strokeDashoffset: [anime.setDashoffset, 0],\r\n    })\r\n    .add({\r\n      targets: \".App-catchphrase\",\r\n      duration: 2000,\r\n      opacity: [0, 1],\r\n      easing: 'easeOutQuart',\r\n      translateY: [\"5vmin\", 0],\r\n    }, '-=500')\r\n  }\r\n\r\n  useEffect(() => {\r\n    animate();\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Logo className=\"App-logo\"/>\r\n        <p className=\"App-catchphrase\">\r\n          I am <em>the</em> software engineer.\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}